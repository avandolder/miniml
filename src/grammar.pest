WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY) ~ NEWLINE }

Program = { SOI ~ Term ~ EOI }
Term = { Apply | ValTerm }
Apply = { ValTerm{2,} }
ValTerm = _{
    Let
    | Match
    | Lambda
    | True
    | False
    | Id
    | Tuple
    | "(" ~ Term ~ ")"
}
Lambda = { "fn" ~ Pattern ~ ":" ~ Type ~ "=>" ~ Term }
Let = { "let" ~ Pattern ~ ":" ~ Type ~ "=" ~ Term ~ "in" ~ Term }
Tuple = { Unit | "(" ~ (Term ~ ",")+ ~ Term? ~ ")" }

// ((), ( ), (true), (true,), (true, false), (true, false,))
// Term => Apply => ValTerm ValTerm+ => Tuple => "(" Unit "," (Term ",")* Term ","? ")"
// => "(" Unit "," Unit "," (Term ",")* Term ","? ")"

Type = { Arrow | Bool | TupleType | "(" ~ Type ~ ")" }
Arrow = { (Bool | TupleType | "(" ~ Type ~ ")") ~ "->" ~ Type }
TupleType = { Unit | "(" ~ (Type ~ ",")+ ~ Type? ~ ")" }

Match = { "match" ~ Term ~ "with" ~ "|"? ~ Arm ~ ("|" ~ Arm)* }
Arm = { Pattern ~ "=>" ~ Term }
Pattern = { Any | True | False | Id | TuplePattern }
TuplePattern = { Unit | "(" ~ (Pattern ~ ",")+ ~ Pattern? ~ ")" }

Id = @{
    !("let" | "in" | "fn" | "true" | "false" | "match" | "with") ~
    ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "'")*
}
Any = @{ "_" }
Unit = _{ "(" ~ ")" }
True = @{ "true" }
False = @{ "false" }
Bool = @{ "Bool" }
